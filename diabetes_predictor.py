# -*- coding: utf-8 -*-
"""Diabetes predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z0K6xyeEyZvCOEufvmkx4x5gvT0HUCQ6
"""

import numpy as np
import pandas as pd

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score



"""Data collection and analysis

"""

db = pd.read_csv("diabetes.csv")

db.head()

db['Outcome'].value_counts()

db.groupby('Outcome').mean()

#separating data and labels
X = db.drop(columns='Outcome', axis =1)
Y = db['Outcome']

print(X)
print(Y)

"""Data Standardisation"""

scaler = StandardScaler()

scaler.fit(X)

standarized_data = scaler.transform(X)

print(standarized_data)

X = standarized_data

"""Train Test split

"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify =Y, random_state =2)

print(X.shape,X_train.shape,X_test.shape)



"""Training the model"""

classifier = svm.SVC(kernel='linear')

#Training the support vector machine classifier
classifier.fit(X_train,Y_train)

"""Model evaluation"""

#accuracy score on the training data
X_train_prediction = classifier.predict(X_train)

training_data_accuracy =accuracy_score(X_train_prediction,Y_train )

print(training_data_accuracy)

#accuracy score on test data
X_test_prediction = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction,Y_test)
print(testing_data_accuracy)

"""Make a predictive system"""

input_data = (8,183,64,0,0,23.3,0.672,32)

#changing the input data to numpy array
input_data_as_numpyarray = np.asarray(input_data)

#reshape as we are predicting using one instance
input_data_reshaped = input_data_as_numpyarray.reshape(1,-1)

std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

